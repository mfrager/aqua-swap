/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type EncodedAccount, type FetchAccountConfig, type FetchAccountsConfig, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type MaybeAccount, type MaybeEncodedAccount } from '@solana/kit';
export type SwapState = {
    owner: Address;
    base: Address;
    quote: Address;
    uuid: bigint;
    price: bigint;
    bumpSeed: number;
};
export type SwapStateArgs = {
    owner: Address;
    base: Address;
    quote: Address;
    uuid: number | bigint;
    price: number | bigint;
    bumpSeed: number;
};
export declare function getSwapStateEncoder(): FixedSizeEncoder<SwapStateArgs>;
export declare function getSwapStateDecoder(): FixedSizeDecoder<SwapState>;
export declare function getSwapStateCodec(): FixedSizeCodec<SwapStateArgs, SwapState>;
export declare function decodeSwapState<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<SwapState, TAddress>;
export declare function decodeSwapState<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<SwapState, TAddress>;
export declare function fetchSwapState<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<SwapState, TAddress>>;
export declare function fetchMaybeSwapState<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<SwapState, TAddress>>;
export declare function fetchAllSwapState(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<SwapState>[]>;
export declare function fetchAllMaybeSwapState(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<SwapState>[]>;
export declare function getSwapStateSize(): number;
