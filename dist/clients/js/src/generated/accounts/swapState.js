/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { assertAccountExists, assertAccountsExist, combineCodec, decodeAccount, fetchEncodedAccount, fetchEncodedAccounts, getAddressDecoder, getAddressEncoder, getStructDecoder, getStructEncoder, getU128Decoder, getU128Encoder, getU64Decoder, getU64Encoder, getU8Decoder, getU8Encoder, } from '@solana/kit';
export function getSwapStateEncoder() {
    return getStructEncoder([
        ['owner', getAddressEncoder()],
        ['base', getAddressEncoder()],
        ['quote', getAddressEncoder()],
        ['uuid', getU128Encoder()],
        ['price', getU64Encoder()],
        ['bumpSeed', getU8Encoder()],
    ]);
}
export function getSwapStateDecoder() {
    return getStructDecoder([
        ['owner', getAddressDecoder()],
        ['base', getAddressDecoder()],
        ['quote', getAddressDecoder()],
        ['uuid', getU128Decoder()],
        ['price', getU64Decoder()],
        ['bumpSeed', getU8Decoder()],
    ]);
}
export function getSwapStateCodec() {
    return combineCodec(getSwapStateEncoder(), getSwapStateDecoder());
}
export function decodeSwapState(encodedAccount) {
    return decodeAccount(encodedAccount, getSwapStateDecoder());
}
export async function fetchSwapState(rpc, address, config) {
    const maybeAccount = await fetchMaybeSwapState(rpc, address, config);
    assertAccountExists(maybeAccount);
    return maybeAccount;
}
export async function fetchMaybeSwapState(rpc, address, config) {
    const maybeAccount = await fetchEncodedAccount(rpc, address, config);
    return decodeSwapState(maybeAccount);
}
export async function fetchAllSwapState(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeSwapState(rpc, addresses, config);
    assertAccountsExist(maybeAccounts);
    return maybeAccounts;
}
export async function fetchAllMaybeSwapState(rpc, addresses, config) {
    const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeSwapState(maybeAccount));
}
export function getSwapStateSize() {
    return 121;
}
