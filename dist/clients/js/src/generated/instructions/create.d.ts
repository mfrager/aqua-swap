/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { AQUA_SWAP_PROGRAM_ADDRESS } from '../programs';
import { type CreateData, type CreateDataArgs } from '../types';
export declare const CREATE_DISCRIMINATOR = 0;
export declare function getCreateDiscriminatorBytes(): ReadonlyUint8Array;
export type CreateInstruction<TProgram extends string = typeof AQUA_SWAP_PROGRAM_ADDRESS, TAccountOwnerAcc extends string | AccountMeta<string> = string, TAccountSwapAcc extends string | AccountMeta<string> = string, TAccountVaultBaseAcc extends string | AccountMeta<string> = string, TAccountVaultQuoteAcc extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountOwnerAcc extends string ? WritableSignerAccount<TAccountOwnerAcc> & AccountSignerMeta<TAccountOwnerAcc> : TAccountOwnerAcc,
    TAccountSwapAcc extends string ? WritableAccount<TAccountSwapAcc> : TAccountSwapAcc,
    TAccountVaultBaseAcc extends string ? ReadonlyAccount<TAccountVaultBaseAcc> : TAccountVaultBaseAcc,
    TAccountVaultQuoteAcc extends string ? ReadonlyAccount<TAccountVaultQuoteAcc> : TAccountVaultQuoteAcc,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
export type CreateInstructionData = {
    discriminator: number;
    createData: CreateData;
};
export type CreateInstructionDataArgs = {
    createData: CreateDataArgs;
};
export declare function getCreateInstructionDataEncoder(): Encoder<CreateInstructionDataArgs>;
export declare function getCreateInstructionDataDecoder(): Decoder<CreateInstructionData>;
export declare function getCreateInstructionDataCodec(): Codec<CreateInstructionDataArgs, CreateInstructionData>;
export type CreateInput<TAccountOwnerAcc extends string = string, TAccountSwapAcc extends string = string, TAccountVaultBaseAcc extends string = string, TAccountVaultQuoteAcc extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string> = {
    /** Owner account */
    ownerAcc: TransactionSigner<TAccountOwnerAcc>;
    /** Swap account */
    swapAcc: Address<TAccountSwapAcc>;
    /** Base vault */
    vaultBaseAcc: Address<TAccountVaultBaseAcc>;
    /** Quote vault */
    vaultQuoteAcc: Address<TAccountVaultQuoteAcc>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    createData: CreateInstructionDataArgs['createData'];
};
export declare function getCreateInstruction<TAccountOwnerAcc extends string, TAccountSwapAcc extends string, TAccountVaultBaseAcc extends string, TAccountVaultQuoteAcc extends string, TAccountSystemProgram extends string, TAccountRent extends string, TProgramAddress extends Address = typeof AQUA_SWAP_PROGRAM_ADDRESS>(input: CreateInput<TAccountOwnerAcc, TAccountSwapAcc, TAccountVaultBaseAcc, TAccountVaultQuoteAcc, TAccountSystemProgram, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): CreateInstruction<TProgramAddress, TAccountOwnerAcc, TAccountSwapAcc, TAccountVaultBaseAcc, TAccountVaultQuoteAcc, TAccountSystemProgram, TAccountRent>;
export type ParsedCreateInstruction<TProgram extends string = typeof AQUA_SWAP_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Owner account */
        ownerAcc: TAccountMetas[0];
        /** Swap account */
        swapAcc: TAccountMetas[1];
        /** Base vault */
        vaultBaseAcc: TAccountMetas[2];
        /** Quote vault */
        vaultQuoteAcc: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
        rent: TAccountMetas[5];
    };
    data: CreateInstructionData;
};
export declare function parseCreateInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCreateInstruction<TProgram, TAccountMetas>;
