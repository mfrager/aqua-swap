"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SWAP_DISCRIMINATOR = void 0;
exports.getSwapDiscriminatorBytes = getSwapDiscriminatorBytes;
exports.getSwapInstructionDataEncoder = getSwapInstructionDataEncoder;
exports.getSwapInstructionDataDecoder = getSwapInstructionDataDecoder;
exports.getSwapInstructionDataCodec = getSwapInstructionDataCodec;
exports.getSwapInstruction = getSwapInstruction;
exports.parseSwapInstruction = parseSwapInstruction;
var kit_1 = require("@solana/kit");
var programs_1 = require("../programs");
var shared_1 = require("../shared");
var accounts_1 = require("../accounts");
exports.SWAP_DISCRIMINATOR = 1;
function getSwapDiscriminatorBytes() {
    return (0, kit_1.getU8Encoder)().encode(exports.SWAP_DISCRIMINATOR);
}
function getSwapInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.getU8Encoder)()],
        ['swapData', (0, accounts_1.getSwapDataEncoder)()],
    ]), function (value) { return (__assign(__assign({}, value), { discriminator: exports.SWAP_DISCRIMINATOR })); });
}
function getSwapInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.getU8Decoder)()],
        ['swapData', (0, accounts_1.getSwapDataDecoder)()],
    ]);
}
function getSwapInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getSwapInstructionDataEncoder(), getSwapInstructionDataDecoder());
}
function getSwapInstruction(input, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    // Program address.
    var programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.AQUA_SWAP_PROGRAM_ADDRESS;
    // Original accounts.
    var originalAccounts = {
        userAcc: { value: (_b = input.userAcc) !== null && _b !== void 0 ? _b : null, isWritable: true },
        swapAcc: { value: (_c = input.swapAcc) !== null && _c !== void 0 ? _c : null, isWritable: false },
        vaultBaseAcc: { value: (_d = input.vaultBaseAcc) !== null && _d !== void 0 ? _d : null, isWritable: true },
        vaultQuoteAcc: { value: (_e = input.vaultQuoteAcc) !== null && _e !== void 0 ? _e : null, isWritable: true },
        userBaseAcc: { value: (_f = input.userBaseAcc) !== null && _f !== void 0 ? _f : null, isWritable: true },
        userQuoteAcc: { value: (_g = input.userQuoteAcc) !== null && _g !== void 0 ? _g : null, isWritable: true },
        baseMintAcc: { value: (_h = input.baseMintAcc) !== null && _h !== void 0 ? _h : null, isWritable: false },
        quoteMintAcc: { value: (_j = input.quoteMintAcc) !== null && _j !== void 0 ? _j : null, isWritable: false },
        bonusBaseAcc: { value: (_k = input.bonusBaseAcc) !== null && _k !== void 0 ? _k : null, isWritable: true },
        bonusQuoteAcc: { value: (_l = input.bonusQuoteAcc) !== null && _l !== void 0 ? _l : null, isWritable: true },
        wsolTempAcc: { value: (_m = input.wsolTempAcc) !== null && _m !== void 0 ? _m : null, isWritable: true },
        tokenProgram: { value: (_o = input.tokenProgram) !== null && _o !== void 0 ? _o : null, isWritable: false },
        systemProgram: { value: (_p = input.systemProgram) !== null && _p !== void 0 ? _p : null, isWritable: false },
    };
    var accounts = originalAccounts;
    // Original args.
    var args = __assign({}, input);
    // Resolve default values.
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    var getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    return Object.freeze({
        accounts: [
            getAccountMeta(accounts.userAcc),
            getAccountMeta(accounts.swapAcc),
            getAccountMeta(accounts.vaultBaseAcc),
            getAccountMeta(accounts.vaultQuoteAcc),
            getAccountMeta(accounts.userBaseAcc),
            getAccountMeta(accounts.userQuoteAcc),
            getAccountMeta(accounts.baseMintAcc),
            getAccountMeta(accounts.quoteMintAcc),
            getAccountMeta(accounts.bonusBaseAcc),
            getAccountMeta(accounts.bonusQuoteAcc),
            getAccountMeta(accounts.wsolTempAcc),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.systemProgram),
        ],
        data: getSwapInstructionDataEncoder().encode(args),
        programAddress: programAddress,
    });
}
function parseSwapInstruction(instruction) {
    if (instruction.accounts.length < 13) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    var accountIndex = 0;
    var getNextAccount = function () {
        var accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            userAcc: getNextAccount(),
            swapAcc: getNextAccount(),
            vaultBaseAcc: getNextAccount(),
            vaultQuoteAcc: getNextAccount(),
            userBaseAcc: getNextAccount(),
            userQuoteAcc: getNextAccount(),
            baseMintAcc: getNextAccount(),
            quoteMintAcc: getNextAccount(),
            bonusBaseAcc: getNextAccount(),
            bonusQuoteAcc: getNextAccount(),
            wsolTempAcc: getNextAccount(),
            tokenProgram: getNextAccount(),
            systemProgram: getNextAccount(),
        },
        data: getSwapInstructionDataDecoder().decode(instruction.data),
    };
}
