/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AQUA_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_DISCRIMINATOR = 2;

export function getCloseDiscriminatorBytes() {
  return getU8Encoder().encode(CLOSE_DISCRIMINATOR);
}

export type CloseInstruction<
  TProgram extends string = typeof AQUA_SWAP_PROGRAM_ADDRESS,
  TAccountOwnerAcc extends string | AccountMeta<string> = string,
  TAccountSwapAcc extends string | AccountMeta<string> = string,
  TAccountVaultBaseAcc extends string | AccountMeta<string> = string,
  TAccountOwnerBaseAcc extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwnerAcc extends string
        ? WritableSignerAccount<TAccountOwnerAcc> &
            AccountSignerMeta<TAccountOwnerAcc>
        : TAccountOwnerAcc,
      TAccountSwapAcc extends string
        ? WritableAccount<TAccountSwapAcc>
        : TAccountSwapAcc,
      TAccountVaultBaseAcc extends string
        ? WritableAccount<TAccountVaultBaseAcc>
        : TAccountVaultBaseAcc,
      TAccountOwnerBaseAcc extends string
        ? WritableAccount<TAccountOwnerBaseAcc>
        : TAccountOwnerBaseAcc,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseInstructionData = { discriminator: number };

export type CloseInstructionDataArgs = {};

export function getCloseInstructionDataEncoder(): FixedSizeEncoder<CloseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: CLOSE_DISCRIMINATOR })
  );
}

export function getCloseInstructionDataDecoder(): FixedSizeDecoder<CloseInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCloseInstructionDataCodec(): FixedSizeCodec<
  CloseInstructionDataArgs,
  CloseInstructionData
> {
  return combineCodec(
    getCloseInstructionDataEncoder(),
    getCloseInstructionDataDecoder()
  );
}

export type CloseInput<
  TAccountOwnerAcc extends string = string,
  TAccountSwapAcc extends string = string,
  TAccountVaultBaseAcc extends string = string,
  TAccountOwnerBaseAcc extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Owner account */
  ownerAcc: TransactionSigner<TAccountOwnerAcc>;
  /** Swap account */
  swapAcc: Address<TAccountSwapAcc>;
  /** Base vault */
  vaultBaseAcc: Address<TAccountVaultBaseAcc>;
  /** Owner base token */
  ownerBaseAcc: Address<TAccountOwnerBaseAcc>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCloseInstruction<
  TAccountOwnerAcc extends string,
  TAccountSwapAcc extends string,
  TAccountVaultBaseAcc extends string,
  TAccountOwnerBaseAcc extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AQUA_SWAP_PROGRAM_ADDRESS,
>(
  input: CloseInput<
    TAccountOwnerAcc,
    TAccountSwapAcc,
    TAccountVaultBaseAcc,
    TAccountOwnerBaseAcc,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseInstruction<
  TProgramAddress,
  TAccountOwnerAcc,
  TAccountSwapAcc,
  TAccountVaultBaseAcc,
  TAccountOwnerBaseAcc,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AQUA_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ownerAcc: { value: input.ownerAcc ?? null, isWritable: true },
    swapAcc: { value: input.swapAcc ?? null, isWritable: true },
    vaultBaseAcc: { value: input.vaultBaseAcc ?? null, isWritable: true },
    ownerBaseAcc: { value: input.ownerBaseAcc ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.ownerAcc),
      getAccountMeta(accounts.swapAcc),
      getAccountMeta(accounts.vaultBaseAcc),
      getAccountMeta(accounts.ownerBaseAcc),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getCloseInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseInstruction<
    TProgramAddress,
    TAccountOwnerAcc,
    TAccountSwapAcc,
    TAccountVaultBaseAcc,
    TAccountOwnerBaseAcc,
    TAccountTokenProgram
  >);
}

export type ParsedCloseInstruction<
  TProgram extends string = typeof AQUA_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Owner account */
    ownerAcc: TAccountMetas[0];
    /** Swap account */
    swapAcc: TAccountMetas[1];
    /** Base vault */
    vaultBaseAcc: TAccountMetas[2];
    /** Owner base token */
    ownerBaseAcc: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: CloseInstructionData;
};

export function parseCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ownerAcc: getNextAccount(),
      swapAcc: getNextAccount(),
      vaultBaseAcc: getNextAccount(),
      ownerBaseAcc: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCloseInstructionDataDecoder().decode(instruction.data),
  };
}
