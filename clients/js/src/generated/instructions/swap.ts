/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AQUA_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSwapDataDecoder,
  getSwapDataEncoder,
  type SwapData,
  type SwapDataArgs,
} from '../accounts';

export const SWAP_DISCRIMINATOR = 1;

export function getSwapDiscriminatorBytes() {
  return getU8Encoder().encode(SWAP_DISCRIMINATOR);
}

export type SwapInstruction<
  TProgram extends string = typeof AQUA_SWAP_PROGRAM_ADDRESS,
  TAccountUserAcc extends string | AccountMeta<string> = string,
  TAccountSwapAcc extends string | AccountMeta<string> = string,
  TAccountVaultBaseAcc extends string | AccountMeta<string> = string,
  TAccountVaultQuoteAcc extends string | AccountMeta<string> = string,
  TAccountUserBaseAcc extends string | AccountMeta<string> = string,
  TAccountUserQuoteAcc extends string | AccountMeta<string> = string,
  TAccountBaseMintAcc extends string | AccountMeta<string> = string,
  TAccountQuoteMintAcc extends string | AccountMeta<string> = string,
  TAccountBonusBaseAcc extends string | AccountMeta<string> = string,
  TAccountBonusQuoteAcc extends string | AccountMeta<string> = string,
  TAccountWsolTempAcc extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUserAcc extends string
        ? WritableSignerAccount<TAccountUserAcc> &
            AccountSignerMeta<TAccountUserAcc>
        : TAccountUserAcc,
      TAccountSwapAcc extends string
        ? ReadonlyAccount<TAccountSwapAcc>
        : TAccountSwapAcc,
      TAccountVaultBaseAcc extends string
        ? WritableAccount<TAccountVaultBaseAcc>
        : TAccountVaultBaseAcc,
      TAccountVaultQuoteAcc extends string
        ? WritableAccount<TAccountVaultQuoteAcc>
        : TAccountVaultQuoteAcc,
      TAccountUserBaseAcc extends string
        ? WritableAccount<TAccountUserBaseAcc>
        : TAccountUserBaseAcc,
      TAccountUserQuoteAcc extends string
        ? WritableAccount<TAccountUserQuoteAcc>
        : TAccountUserQuoteAcc,
      TAccountBaseMintAcc extends string
        ? ReadonlyAccount<TAccountBaseMintAcc>
        : TAccountBaseMintAcc,
      TAccountQuoteMintAcc extends string
        ? ReadonlyAccount<TAccountQuoteMintAcc>
        : TAccountQuoteMintAcc,
      TAccountBonusBaseAcc extends string
        ? WritableAccount<TAccountBonusBaseAcc>
        : TAccountBonusBaseAcc,
      TAccountBonusQuoteAcc extends string
        ? WritableAccount<TAccountBonusQuoteAcc>
        : TAccountBonusQuoteAcc,
      TAccountWsolTempAcc extends string
        ? WritableAccount<TAccountWsolTempAcc>
        : TAccountWsolTempAcc,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = { discriminator: number; swapData: SwapData };

export type SwapInstructionDataArgs = { swapData: SwapDataArgs };

export function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['swapData', getSwapDataEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_DISCRIMINATOR })
  );
}

export function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['swapData', getSwapDataDecoder()],
  ]);
}

export function getSwapInstructionDataCodec(): Codec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapInput<
  TAccountUserAcc extends string = string,
  TAccountSwapAcc extends string = string,
  TAccountVaultBaseAcc extends string = string,
  TAccountVaultQuoteAcc extends string = string,
  TAccountUserBaseAcc extends string = string,
  TAccountUserQuoteAcc extends string = string,
  TAccountBaseMintAcc extends string = string,
  TAccountQuoteMintAcc extends string = string,
  TAccountBonusBaseAcc extends string = string,
  TAccountBonusQuoteAcc extends string = string,
  TAccountWsolTempAcc extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** User account */
  userAcc: TransactionSigner<TAccountUserAcc>;
  /** Swap account */
  swapAcc: Address<TAccountSwapAcc>;
  /** Base vault */
  vaultBaseAcc: Address<TAccountVaultBaseAcc>;
  /** Quote vault */
  vaultQuoteAcc: Address<TAccountVaultQuoteAcc>;
  /** User base token */
  userBaseAcc: Address<TAccountUserBaseAcc>;
  /** User quote token */
  userQuoteAcc: Address<TAccountUserQuoteAcc>;
  /** Base mint */
  baseMintAcc: Address<TAccountBaseMintAcc>;
  /** Quote mint */
  quoteMintAcc: Address<TAccountQuoteMintAcc>;
  /** Bonus base token */
  bonusBaseAcc: Address<TAccountBonusBaseAcc>;
  /** Bonus quote token or account */
  bonusQuoteAcc: Address<TAccountBonusQuoteAcc>;
  /** WSOL temporary token */
  wsolTempAcc: Address<TAccountWsolTempAcc>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  swapData: SwapInstructionDataArgs['swapData'];
};

export function getSwapInstruction<
  TAccountUserAcc extends string,
  TAccountSwapAcc extends string,
  TAccountVaultBaseAcc extends string,
  TAccountVaultQuoteAcc extends string,
  TAccountUserBaseAcc extends string,
  TAccountUserQuoteAcc extends string,
  TAccountBaseMintAcc extends string,
  TAccountQuoteMintAcc extends string,
  TAccountBonusBaseAcc extends string,
  TAccountBonusQuoteAcc extends string,
  TAccountWsolTempAcc extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof AQUA_SWAP_PROGRAM_ADDRESS,
>(
  input: SwapInput<
    TAccountUserAcc,
    TAccountSwapAcc,
    TAccountVaultBaseAcc,
    TAccountVaultQuoteAcc,
    TAccountUserBaseAcc,
    TAccountUserQuoteAcc,
    TAccountBaseMintAcc,
    TAccountQuoteMintAcc,
    TAccountBonusBaseAcc,
    TAccountBonusQuoteAcc,
    TAccountWsolTempAcc,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInstruction<
  TProgramAddress,
  TAccountUserAcc,
  TAccountSwapAcc,
  TAccountVaultBaseAcc,
  TAccountVaultQuoteAcc,
  TAccountUserBaseAcc,
  TAccountUserQuoteAcc,
  TAccountBaseMintAcc,
  TAccountQuoteMintAcc,
  TAccountBonusBaseAcc,
  TAccountBonusQuoteAcc,
  TAccountWsolTempAcc,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AQUA_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userAcc: { value: input.userAcc ?? null, isWritable: true },
    swapAcc: { value: input.swapAcc ?? null, isWritable: false },
    vaultBaseAcc: { value: input.vaultBaseAcc ?? null, isWritable: true },
    vaultQuoteAcc: { value: input.vaultQuoteAcc ?? null, isWritable: true },
    userBaseAcc: { value: input.userBaseAcc ?? null, isWritable: true },
    userQuoteAcc: { value: input.userQuoteAcc ?? null, isWritable: true },
    baseMintAcc: { value: input.baseMintAcc ?? null, isWritable: false },
    quoteMintAcc: { value: input.quoteMintAcc ?? null, isWritable: false },
    bonusBaseAcc: { value: input.bonusBaseAcc ?? null, isWritable: true },
    bonusQuoteAcc: { value: input.bonusQuoteAcc ?? null, isWritable: true },
    wsolTempAcc: { value: input.wsolTempAcc ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.userAcc),
      getAccountMeta(accounts.swapAcc),
      getAccountMeta(accounts.vaultBaseAcc),
      getAccountMeta(accounts.vaultQuoteAcc),
      getAccountMeta(accounts.userBaseAcc),
      getAccountMeta(accounts.userQuoteAcc),
      getAccountMeta(accounts.baseMintAcc),
      getAccountMeta(accounts.quoteMintAcc),
      getAccountMeta(accounts.bonusBaseAcc),
      getAccountMeta(accounts.bonusQuoteAcc),
      getAccountMeta(accounts.wsolTempAcc),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
    programAddress,
  } as SwapInstruction<
    TProgramAddress,
    TAccountUserAcc,
    TAccountSwapAcc,
    TAccountVaultBaseAcc,
    TAccountVaultQuoteAcc,
    TAccountUserBaseAcc,
    TAccountUserQuoteAcc,
    TAccountBaseMintAcc,
    TAccountQuoteMintAcc,
    TAccountBonusBaseAcc,
    TAccountBonusQuoteAcc,
    TAccountWsolTempAcc,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof AQUA_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** User account */
    userAcc: TAccountMetas[0];
    /** Swap account */
    swapAcc: TAccountMetas[1];
    /** Base vault */
    vaultBaseAcc: TAccountMetas[2];
    /** Quote vault */
    vaultQuoteAcc: TAccountMetas[3];
    /** User base token */
    userBaseAcc: TAccountMetas[4];
    /** User quote token */
    userQuoteAcc: TAccountMetas[5];
    /** Base mint */
    baseMintAcc: TAccountMetas[6];
    /** Quote mint */
    quoteMintAcc: TAccountMetas[7];
    /** Bonus base token */
    bonusBaseAcc: TAccountMetas[8];
    /** Bonus quote token or account */
    bonusQuoteAcc: TAccountMetas[9];
    /** WSOL temporary token */
    wsolTempAcc: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      userAcc: getNextAccount(),
      swapAcc: getNextAccount(),
      vaultBaseAcc: getNextAccount(),
      vaultQuoteAcc: getNextAccount(),
      userBaseAcc: getNextAccount(),
      userQuoteAcc: getNextAccount(),
      baseMintAcc: getNextAccount(),
      quoteMintAcc: getNextAccount(),
      bonusBaseAcc: getNextAccount(),
      bonusQuoteAcc: getNextAccount(),
      wsolTempAcc: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}
