/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AQUA_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCreateDataDecoder,
  getCreateDataEncoder,
  type CreateData,
  type CreateDataArgs,
} from '../types';

export const CREATE_DISCRIMINATOR = 0;

export function getCreateDiscriminatorBytes() {
  return getU8Encoder().encode(CREATE_DISCRIMINATOR);
}

export type CreateInstruction<
  TProgram extends string = typeof AQUA_SWAP_PROGRAM_ADDRESS,
  TAccountOwnerAcc extends string | AccountMeta<string> = string,
  TAccountSwapAcc extends string | AccountMeta<string> = string,
  TAccountVaultBaseAcc extends string | AccountMeta<string> = string,
  TAccountVaultQuoteAcc extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwnerAcc extends string
        ? WritableSignerAccount<TAccountOwnerAcc> &
            AccountSignerMeta<TAccountOwnerAcc>
        : TAccountOwnerAcc,
      TAccountSwapAcc extends string
        ? WritableAccount<TAccountSwapAcc>
        : TAccountSwapAcc,
      TAccountVaultBaseAcc extends string
        ? ReadonlyAccount<TAccountVaultBaseAcc>
        : TAccountVaultBaseAcc,
      TAccountVaultQuoteAcc extends string
        ? ReadonlyAccount<TAccountVaultQuoteAcc>
        : TAccountVaultQuoteAcc,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CreateInstructionData = {
  discriminator: number;
  createData: CreateData;
};

export type CreateInstructionDataArgs = { createData: CreateDataArgs };

export function getCreateInstructionDataEncoder(): Encoder<CreateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['createData', getCreateDataEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_DISCRIMINATOR })
  );
}

export function getCreateInstructionDataDecoder(): Decoder<CreateInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['createData', getCreateDataDecoder()],
  ]);
}

export function getCreateInstructionDataCodec(): Codec<
  CreateInstructionDataArgs,
  CreateInstructionData
> {
  return combineCodec(
    getCreateInstructionDataEncoder(),
    getCreateInstructionDataDecoder()
  );
}

export type CreateInput<
  TAccountOwnerAcc extends string = string,
  TAccountSwapAcc extends string = string,
  TAccountVaultBaseAcc extends string = string,
  TAccountVaultQuoteAcc extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** Owner account */
  ownerAcc: TransactionSigner<TAccountOwnerAcc>;
  /** Swap account */
  swapAcc: Address<TAccountSwapAcc>;
  /** Base vault */
  vaultBaseAcc: Address<TAccountVaultBaseAcc>;
  /** Quote vault */
  vaultQuoteAcc: Address<TAccountVaultQuoteAcc>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  createData: CreateInstructionDataArgs['createData'];
};

export function getCreateInstruction<
  TAccountOwnerAcc extends string,
  TAccountSwapAcc extends string,
  TAccountVaultBaseAcc extends string,
  TAccountVaultQuoteAcc extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof AQUA_SWAP_PROGRAM_ADDRESS,
>(
  input: CreateInput<
    TAccountOwnerAcc,
    TAccountSwapAcc,
    TAccountVaultBaseAcc,
    TAccountVaultQuoteAcc,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): CreateInstruction<
  TProgramAddress,
  TAccountOwnerAcc,
  TAccountSwapAcc,
  TAccountVaultBaseAcc,
  TAccountVaultQuoteAcc,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? AQUA_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ownerAcc: { value: input.ownerAcc ?? null, isWritable: true },
    swapAcc: { value: input.swapAcc ?? null, isWritable: true },
    vaultBaseAcc: { value: input.vaultBaseAcc ?? null, isWritable: false },
    vaultQuoteAcc: { value: input.vaultQuoteAcc ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.ownerAcc),
      getAccountMeta(accounts.swapAcc),
      getAccountMeta(accounts.vaultBaseAcc),
      getAccountMeta(accounts.vaultQuoteAcc),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getCreateInstructionDataEncoder().encode(
      args as CreateInstructionDataArgs
    ),
    programAddress,
  } as CreateInstruction<
    TProgramAddress,
    TAccountOwnerAcc,
    TAccountSwapAcc,
    TAccountVaultBaseAcc,
    TAccountVaultQuoteAcc,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ParsedCreateInstruction<
  TProgram extends string = typeof AQUA_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Owner account */
    ownerAcc: TAccountMetas[0];
    /** Swap account */
    swapAcc: TAccountMetas[1];
    /** Base vault */
    vaultBaseAcc: TAccountMetas[2];
    /** Quote vault */
    vaultQuoteAcc: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    rent: TAccountMetas[5];
  };
  data: CreateInstructionData;
};

export function parseCreateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ownerAcc: getNextAccount(),
      swapAcc: getNextAccount(),
      vaultBaseAcc: getNextAccount(),
      vaultQuoteAcc: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateInstructionDataDecoder().decode(instruction.data),
  };
}
