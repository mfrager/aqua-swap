/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateInstruction,
  type ParsedSwapInstruction,
} from '../instructions';

export const AQUA_SWAP_PROGRAM_ADDRESS =
  '26iQhBNLcPpV5gQnbCAqLR9m1rY7ZG88Qvmm2yLTKUiQ' as Address<'26iQhBNLcPpV5gQnbCAqLR9m1rY7ZG88Qvmm2yLTKUiQ'>;

export enum AquaSwapAccount {
  CreateData,
  SwapData,
  SwapState,
}

export enum AquaSwapInstruction {
  Create,
  Swap,
}

export function identifyAquaSwapInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AquaSwapInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return AquaSwapInstruction.Create;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return AquaSwapInstruction.Swap;
  }
  throw new Error(
    'The provided instruction could not be identified as a aquaSwap instruction.'
  );
}

export type ParsedAquaSwapInstruction<
  TProgram extends string = '26iQhBNLcPpV5gQnbCAqLR9m1rY7ZG88Qvmm2yLTKUiQ',
> =
  | ({
      instructionType: AquaSwapInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: AquaSwapInstruction.Swap;
    } & ParsedSwapInstruction<TProgram>);
