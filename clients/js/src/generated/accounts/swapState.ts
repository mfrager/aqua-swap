/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export type SwapState = {
  owner: Address;
  base: Address;
  quote: Address;
  uuid: bigint;
  price: bigint;
  bumpSeed: number;
};

export type SwapStateArgs = {
  owner: Address;
  base: Address;
  quote: Address;
  uuid: number | bigint;
  price: number | bigint;
  bumpSeed: number;
};

export function getSwapStateEncoder(): FixedSizeEncoder<SwapStateArgs> {
  return getStructEncoder([
    ['owner', getAddressEncoder()],
    ['base', getAddressEncoder()],
    ['quote', getAddressEncoder()],
    ['uuid', getU128Encoder()],
    ['price', getU64Encoder()],
    ['bumpSeed', getU8Encoder()],
  ]);
}

export function getSwapStateDecoder(): FixedSizeDecoder<SwapState> {
  return getStructDecoder([
    ['owner', getAddressDecoder()],
    ['base', getAddressDecoder()],
    ['quote', getAddressDecoder()],
    ['uuid', getU128Decoder()],
    ['price', getU64Decoder()],
    ['bumpSeed', getU8Decoder()],
  ]);
}

export function getSwapStateCodec(): FixedSizeCodec<SwapStateArgs, SwapState> {
  return combineCodec(getSwapStateEncoder(), getSwapStateDecoder());
}

export function decodeSwapState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<SwapState, TAddress>;
export function decodeSwapState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<SwapState, TAddress>;
export function decodeSwapState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<SwapState, TAddress> | MaybeAccount<SwapState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSwapStateDecoder()
  );
}

export async function fetchSwapState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<SwapState, TAddress>> {
  const maybeAccount = await fetchMaybeSwapState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSwapState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<SwapState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSwapState(maybeAccount);
}

export async function fetchAllSwapState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<SwapState>[]> {
  const maybeAccounts = await fetchAllMaybeSwapState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSwapState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<SwapState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSwapState(maybeAccount));
}

export function getSwapStateSize(): number {
  return 121;
}
