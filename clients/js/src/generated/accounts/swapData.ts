/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export type SwapData = { quoteIn: bigint };

export type SwapDataArgs = { quoteIn: number | bigint };

export function getSwapDataEncoder(): FixedSizeEncoder<SwapDataArgs> {
  return getStructEncoder([['quoteIn', getU64Encoder()]]);
}

export function getSwapDataDecoder(): FixedSizeDecoder<SwapData> {
  return getStructDecoder([['quoteIn', getU64Decoder()]]);
}

export function getSwapDataCodec(): FixedSizeCodec<SwapDataArgs, SwapData> {
  return combineCodec(getSwapDataEncoder(), getSwapDataDecoder());
}

export function decodeSwapData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<SwapData, TAddress>;
export function decodeSwapData<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<SwapData, TAddress>;
export function decodeSwapData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<SwapData, TAddress> | MaybeAccount<SwapData, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSwapDataDecoder()
  );
}

export async function fetchSwapData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<SwapData, TAddress>> {
  const maybeAccount = await fetchMaybeSwapData(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSwapData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<SwapData, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSwapData(maybeAccount);
}

export async function fetchAllSwapData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<SwapData>[]> {
  const maybeAccounts = await fetchAllMaybeSwapData(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSwapData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<SwapData>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSwapData(maybeAccount));
}

export function getSwapDataSize(): number {
  return 8;
}
