/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export type CreateData = { uuid: bigint; price: bigint; bumpSeed: number };

export type CreateDataArgs = {
  uuid: number | bigint;
  price: number | bigint;
  bumpSeed: number;
};

export function getCreateDataEncoder(): FixedSizeEncoder<CreateDataArgs> {
  return getStructEncoder([
    ['uuid', getU128Encoder()],
    ['price', getU64Encoder()],
    ['bumpSeed', getU8Encoder()],
  ]);
}

export function getCreateDataDecoder(): FixedSizeDecoder<CreateData> {
  return getStructDecoder([
    ['uuid', getU128Decoder()],
    ['price', getU64Decoder()],
    ['bumpSeed', getU8Decoder()],
  ]);
}

export function getCreateDataCodec(): FixedSizeCodec<
  CreateDataArgs,
  CreateData
> {
  return combineCodec(getCreateDataEncoder(), getCreateDataDecoder());
}

export function decodeCreateData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CreateData, TAddress>;
export function decodeCreateData<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CreateData, TAddress>;
export function decodeCreateData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<CreateData, TAddress> | MaybeAccount<CreateData, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCreateDataDecoder()
  );
}

export async function fetchCreateData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CreateData, TAddress>> {
  const maybeAccount = await fetchMaybeCreateData(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCreateData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CreateData, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCreateData(maybeAccount);
}

export async function fetchAllCreateData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CreateData>[]> {
  const maybeAccounts = await fetchAllMaybeCreateData(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCreateData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CreateData>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCreateData(maybeAccount));
}

export function getCreateDataSize(): number {
  return 25;
}
