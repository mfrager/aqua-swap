"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapError = void 0;
exports.getSwapErrorEncoder = getSwapErrorEncoder;
exports.getSwapErrorDecoder = getSwapErrorDecoder;
exports.getSwapErrorCodec = getSwapErrorCodec;
var kit_1 = require("@solana/kit");
var SwapError;
(function (SwapError) {
    SwapError[SwapError["InvalidParameters"] = 0] = "InvalidParameters";
    SwapError[SwapError["InvalidPDA"] = 1] = "InvalidPDA";
    SwapError[SwapError["WrongOwnerBase"] = 2] = "WrongOwnerBase";
    SwapError[SwapError["WrongOwnerQuote"] = 3] = "WrongOwnerQuote";
    SwapError[SwapError["WrongMintBase"] = 4] = "WrongMintBase";
    SwapError[SwapError["WrongMintQuote"] = 5] = "WrongMintQuote";
    SwapError[SwapError["WrongVaultBase"] = 6] = "WrongVaultBase";
    SwapError[SwapError["WrongVaultQuote"] = 7] = "WrongVaultQuote";
    SwapError[SwapError["SameMint"] = 8] = "SameMint";
    SwapError[SwapError["NotOwner"] = 9] = "NotOwner";
})(SwapError || (exports.SwapError = SwapError = {}));
function getSwapErrorEncoder() {
    return (0, kit_1.getEnumEncoder)(SwapError);
}
function getSwapErrorDecoder() {
    return (0, kit_1.getEnumDecoder)(SwapError);
}
function getSwapErrorCodec() {
    return (0, kit_1.combineCodec)(getSwapErrorEncoder(), getSwapErrorDecoder());
}
